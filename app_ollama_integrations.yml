## Ollama: https://github.com/ollama/ollama/blob/main/docs/linux.md
## Open-WebUI: https://docs.openwebui.com/getting-started/quick-start/

- ansible.builtin.import_playbook: repos_distro_au.yml
- ansible.builtin.import_playbook: drivers_nvidia_cuda.yml
- ansible.builtin.import_playbook: service_cockpit_firewalld.yml

- hosts: localhost
  gather_facts: no

  vars:
    - my_name: "app_ollama_integrations"
    - my_path: "/opt/sharonai"
    - my_packages_deb:
      - python3
      - python3-pip
      - python3-virtualenv
      - git
      - wget
      - curl
      - aria2

  tasks:

  - name: "{{ my_name }} install pre-requisite deb packages"
    ansible.builtin.package:
       name: "{{ my_packages_deb }}"
       state: latest
    when: ansible_distribution == "Ubuntu" or
          ansible_distribution == "Debian"

  - name: "{{ my_name }} top level path"
    ansible.builtin.file:
      path: "{{ my_path }}"
      state: directory
      recurse: true
      owner: 1000
      group: 1000

  - name: "{{ my_name }} tmp path"
    ansible.builtin.file:
      path: "{{ my_path }}/tmp"
      state: directory
      recurse: true
      owner: 1000
      group: 1000

## Ollama: https://github.com/ollama/ollama/blob/main/docs/linux.md

  - name: "{{ my_name }} download ollama"
    ansible.builtin.command:
      chdir: "{{ my_path }}/tmp"
      cmd: aria2c --max-concurrent-downloads=10 --max-connection-per-server=10 --allow-overwrite=true https://ollama.com/download/ollama-linux-amd64.tgz
      creates: ollama-linux-amd64.tgz

  - name: "{{ my_name }} ollama path"
    ansible.builtin.file:
      path: "{{ my_path }}/ollama"
      state: directory
      recurse: true
      owner: 1000
      group: 1000

  - name: "{{ my_name }} install ollama"
    ansible.builtin.unarchive:
      src: "{{ my_path }}/tmp/ollama-linux-amd64.tgz"
      dest: "{{ my_path }}/ollama"
      list_files: true
      owner: 1000
      group: 1000
    notify: "{{ my_name }} ollama service restart"

  - name: "{{ my_name }} ollama.sh"
    ansible.builtin.template:
      src: "templates/{{ my_name }}/ollama.sh.j2"
      dest: "{{ my_path }}/ollama/ollama.sh"
      owner: 1000
      group: 1000
      mode: 0755
    notify: "{{ my_name }} ollama service restart"

  - name: "{{ my_name }} service file"
    ansible.builtin.template:
      src: "templates/{{ my_name }}/ollama.service.j2"
      dest: "/usr/lib/systemd/system/ollama.service"
      owner: root
      group: root
      mode: 0644
    notify: "{{ my_name }} ollama service restart"

  - name: "{{ my_name }} ollama service enable"
    ansible.builtin.service:
      name: ollama
      enabled: yes

## Open-WebUI: https://docs.openwebui.com/getting-started/quick-start/

  - name: "{{ my_name }} install open-webui"
    ansible.builtin.pip:
      virtualenv: "{{ my_path }}/open-webui"
      name: "open-webui"
    notify: "{{ my_name }} my_path permissions"

  - name: "{{ my_name }} open-webui.sh"
    ansible.builtin.template:
      src: "templates/{{ my_name }}/open-webui.sh.j2"
      dest: "{{ my_path }}/open-webui/open-webui.sh"
      owner: 1000
      group: 1000
      mode: 0755
    notify: "{{ my_name }} open-webui service restart"

  - name: "{{ my_name }} open-webui.service"
    ansible.builtin.template:
      src: "templates/{{ my_name }}/open-webui.service.j2"
      dest: "/usr/lib/systemd/system/open-webui.service"
      owner: root
      group: root
      mode: 0644
    notify: "{{ my_name }} open-webui service restart"

## Firewall settings

  - name: "{{ my_name }} firewalld define ollama service"
    ansible.builtin.command:
      cmd: firewall-cmd --permanent --new-service=ollama
    ignore_errors: true

  - name: "{{ my_name }} firewalld define open-webui service"
    ansible.builtin.command:
      cmd: firewall-cmd --permanent --new-service=open-webui
    ignore_errors: true

  - name: "{{ my_name }} firewalld define ollama port"
    ansible.builtin.command:
      cmd: firewall-cmd --permanent --service=ollama --add-port=11434/tcp
    ignore_errors: true

  - name: "{{ my_name }} firewalld define open-webui port"
    ansible.builtin.command:
      cmd: firewall-cmd --permanent --service=open-webui --add-port=8080/tcp
    ignore_errors: true

  - name: "{{ my_name }} firewalld allow ollama"
    ansible.builtin.command:
      cmd: firewall-cmd --permanent --add-service=ollama
    ignore_errors: true

  - name: "{{ my_name }} firewalld allow open-webui"
    ansible.builtin.command:
      cmd: firewall-cmd --permanent --add-service=open-webui
    ignore_errors: true

  - name: "{{ my_name }} firewalld reload"
    ansible.builtin.command:
      cmd: firewall-cmd --reload
    ignore_errors: true

  handlers:

  - name: "{{ my_name }} my_path permissions"
    ansible.builtin.file:
      path: "{{ my_path }}"
      state: directory
      recurse: true
      owner: 1000
      group: 1000

  - name: "{{ my_name }} open-webui service restart"
    ansible.builtin.service:
      name: open-webui
      state: restarted

  - name: "{{ my_name }} ollama service restart"
    ansible.builtin.service:
      name: ollama
      state: restarted

