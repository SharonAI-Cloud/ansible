- ansible.builtin.import_playbook: repos_distro_au.yml
- ansible.builtin.import_playbook: repos_nvidia.yml
- ansible.builtin.import_playbook: drivers_nvidia_cuda.yml

- hosts: localhost
  gather_facts: yes

  vars:
    - my_name: "service_slurm_compute_gpu"
    - my_packages_deb:
      - munge
      - slurmd
      - slurm-client
      - xubuntu-desktop-minimal
      - turbovnc
      - virtualgl
      - python3
      - python3-pip
      - python3-virtualenv
      - python-is-python3
      - websockify
      - nfs-common

  tasks:

  - name: "{{ my_name }} download virtualgl signing  key"
    ansible.builtin.get_url:
      url: https://packagecloud.io/dcommander/virtualgl/gpgkey
      dest: /tmp/VirtualGL.asc
      force: true

  - name: "{{ my_name }} download turbovnc signing key"
    ansible.builtin.get_url:
      url: https://packagecloud.io/dcommander/turbovnc/gpgkey
      dest: /tmp/TurboVNC.asc
      force: true

  - name: "{{ my_name }} dearmour virtualgl signing  key"
    ansible.builtin.command: /usr/bin/gpg --batch --yes --dearmor --output /etc/apt/trusted.gpg.d/VirtualGL.gpg /tmp/VirtualGL.asc

  - name: "{{ my_name }} dearmour turbovnc signing  key"
    ansible.builtin.command: /usr/bin/gpg --batch --yes --dearmor --output /etc/apt/trusted.gpg.d/TurboVNC.gpg /tmp/TurboVNC.asc

  - name: "{{ my_name }} download virtualgl sources list"
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/VirtualGL/repo/main/VirtualGL.list
      dest: /etc/apt/sources.list.d/VirtualGL.list
      force: true

  - name: "{{ my_name }} download turbovnc sources list"
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/TurboVNC/repo/main/TurboVNC.list
      dest: /etc/apt/sources.list.d/TurboVNC.list
      force: true

  - name: "{{ my_name }} install packages"
    ansible.builtin.apt:
      name: "{{ my_packages_deb }}"
      state: latest
      update_cache: true

  - name: "{{ my_name }} /var/spool/slurmd path"
    ansible.builtin.file:
      path: "/var/spool/slurmd"
      state: directory
      recurse: true
      owner: "slurm"
      group: "slurm"

  - name: "{{ my_name }} /var/log/slurm path"
    ansible.builtin.file:
      path: "/var/log/slurm"
      state: directory
      recurse: true
      owner: "slurm"
      group: "slurm"

  - name: "{{ my_name }} slurm.conf"
    ansible.builtin.template:
      src: "templates/{{ my_name }}/slurm.conf.j2"
      dest: "/etc/slurm/slurm.conf"
      owner: "slurm"
      group: "slurm"
      mode: 0640
    notify: "{{ my_name }} restart slurmd"

  - name: "{{ my_name }} slurm gres.conf"
    ansible.builtin.template:
      src: "templates/{{ my_name }}/gres.conf.j2"
      dest: "/etc/slurm/gres.conf"
      owner: "slurm"
      group: "slurm"
      mode: 0640
    notify: "{{ my_name }} restart slurmd"

  - name: "{{ my_name }} disable lightdm"
    ansible.builtin.service:
      name: "lightdm"
      state: stopped
      enabled: false

  - name: "{{ my_name }} install JupyterLab Tensorflow"
    ansible.builtin.pip:
      virtualenv: "/opt/jupyterlab_tensorflow"
      name: "jupyterlab,numpy,matplotlib,pandas,configurable-http-proxy,tensorflow[and-cuda],onnx,keras,numba,datasets"

  - name: "{{ my_name }} install JupyterLab PyTorch"
    ansible.builtin.pip:
      virtualenv: "/opt/jupyterlab_pytorch"
      name: "jupyterlab,numpy,matplotlib,pandas,configurable-http-proxy,torch,torchvision,torchaudio,onnx,keras,numba,datasets"

  - name: "{{ my_name }} add default user to gpu groups"
    ansible.builtin.user:
      name: ubuntu
      groups: render,video
      append: yes
    ignore_errors: true

  handlers:

  - name: "{{ my_name }} restart slurmd"
    ansible.builtin.service:
      name: "slurmd"
      state: restarted
      enabled: true
